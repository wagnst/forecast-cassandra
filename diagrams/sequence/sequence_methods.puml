@startuml

hide footbox
participant  ":ForecastWS"
participant  ":SalesService"
participant  ":FixedCostsService"
participant  ":ExchangeRateRequest"
participant  ":OrgStructureAndRegionRequest"
participant  ":SalesRequest"
participant  ":FixedCostsRequest"
participant  ":KpiRequest"
participant  ":Stream"



":ForecastWS" -> ":SalesService" : getSalesKPIs(planPeriod, currentPeriod, curr)
":SalesService" -> ":ExchangeRateRequest" : new ExchangeRateRequest(getConnection(), toCurrency)
":ExchangeRateRequest" --> ":SalesService" : new ExchangeRateRequest
":SalesService" -> ":OrgStructureAndRegionRequest" : new OrgStructureAndRegionRequest(getConnection())
":OrgStructureAndRegionRequest" --> ":SalesService" : new OrgStructureAndRegionRequest
":SalesService" -> ":SalesRequest" : new SalesRequest(getConnection())
":SalesRequest" --> ":SalesService" : new SalesRequest
":SalesService" -> ":SalesRequest" : getPmgAndRegions()
":SalesRequest" --> ":SalesService" : Map<String, Set<String>>
par
    ":SalesService" -> ":SalesRequest": stream().parallel()
    loop
        ":SalesRequest" -> ":KpiRequest" : calculateKpis()
        ":KpiRequest"  --> ":SalesRequest" : Stream<OutputDataType>
    end
    ":SalesRequest" --> ":SalesService" : Stream<OutputDataType>
end
":SalesService" --> ":ForecastWS" : Stream<salesKpis>



":ForecastWS" -> ":FixedCostsService" : getFixedCostsKpis(planPeriod, currentPeriod, curr)
":FixedCostsService" -> ":ExchangeRateRequest" : new ExchangeRateRequest(getConnection(), toCurrency)
":ExchangeRateRequest" --> ":FixedCostsService" : new ExchangeRateRequest
":FixedCostsService" ->  ":OrgStructureAndRegionRequest" : new OrgStructureAndRegionRequest(getConnection())
":OrgStructureAndRegionRequest" --> ":FixedCostsService" : new OrgStructureAndRegionRequest
":FixedCostsService" -> ":FixedCostsRequest" : FixedCostsRequest(getConnection())
":FixedCostsRequest" --> ":FixedCostsService" : new FixedCostsRequest
":FixedCostsService" -> ":FixedCostsRequest" : getSubregionsAndSbu()
":FixedCostsRequest" --> ":FixedCostsService" : Map<String, Set<String>>
par
    ":FixedCostsService" -> ":FixedCostsRequest": stream().parallel()
    loop
        ":FixedCostsRequest" -> ":KpiRequest" : calculateKpis()
        ":KpiRequest"  --> ":FixedCostsRequest" : Stream<OutputDataType>
    end
    ":FixedCostsRequest" --> ":FixedCostsService" : Stream<OutputDataType>
end
":FixedCostsService" --> ":ForecastWS" : Stream<fixedCostsKpis>


":ForecastWS" -> ":Stream" : concat(salesKpis, fixedCostsKpis)
":Stream" -> ":Stream" : sorted()
":Stream" -> ":Stream" : collect()
":Stream" --> ":ForecastWS" : List<OutputDataType>







@enduml